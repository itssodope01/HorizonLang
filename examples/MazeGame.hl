const int ROWS = 7; @ Maze dimensions
const int COLS = 7;
list<string> maze = ["#", "#", "#", "#", "#", "#", "#",
                     "#", " ", " ", " ", "#", " ", "#",
                     "#", " ", "#", " ", "#", " ", "#",
                     "#", " ", "#", " ", " ", " ", "#",
                     "#", " ", "#", " ", "#", " ", "#",
                     "#", " ", " ", " ", "#", " ", "#",
                     "#", "#", "#", "#", "#", "#", "#"];

int player_row = 1;
int player_col = 1;
int score = 0; @ Player's score
int moves_left = 20; @ Limited number of moves
const string PLAYER_SYMBOL = "P";
const string GOAL_SYMBOL = "G";
const string HAZARD_SYMBOL = "*";

@ Function to calculate index in flat list
fx get_index(int row, int col) {
    return row * COLS + col;
}

@ Randomize the maze with hazards and goals
fx randomize_maze() {
    for (i, 1, ROWS - 2) {
        for (j, 1, COLS - 2) {
            int chance = i * j % 7; @ Simple randomness
            if (chance == 3) {
                maze[get_index(i, j)] = HAZARD_SYMBOL; @ Place hazard
            } elseif (chance == 5) {
                maze[get_index(i, j)] = GOAL_SYMBOL; @ Place intermediate goals
            }
        }
    }
    maze[get_index(player_row, player_col)] = PLAYER_SYMBOL; @ Set player start
    maze[get_index(ROWS - 2, COLS - 2)] = GOAL_SYMBOL; @ Final goal
}

@ Display the maze
fx display_maze() {
    for (i, 0, ROWS - 1) {
        string row_str = "";
        for (j, 0, COLS - 1) {
            row_str = row_str.concat(maze[get_index(i, j)]);
        }
        print(row_str);
    }
    print("Score: " + STR(score) + ", Moves Left: " + STR(moves_left));
}

@ Move player
fx move_player(string direction) {
    int new_row = player_row;
    int new_col = player_col;

    if (direction == "up") {
        new_row = player_row - 1;
    } elseif (direction == "down") {
        new_row = player_row + 1;
    } elseif (direction == "left") {
        new_col = player_col - 1;
    } elseif (direction == "right") {
        new_col = player_col + 1;
    } else {
        print("Invalid direction. Use up, down, left, or right.");
        return;
    }

    if (new_row >= 0 and new_row < ROWS and new_col >= 0 and new_col < COLS) {
        int new_index = get_index(new_row, new_col);
        string target = maze[new_index];

        if (target == "#") {
            print("Cannot move into a wall.");
        } elseif (target == HAZARD_SYMBOL) {
            score = score - 5; @ Penalize for hazards
            print("You hit a hazard! -5 points.");
        } elseif (target == GOAL_SYMBOL) {
            score = score + 10; @ Reward for reaching goals
            print("Goal reached! +10 points.");
        }

        maze[get_index(player_row, player_col)] = " "; @ Clear current position
        maze[new_index] = PLAYER_SYMBOL; @ Move player
        player_row = new_row;
        player_col = new_col;
        moves_left = moves_left - 1;
    } else {
        print("Out of bounds.");
    }
}

@ Main game loop
fx play_game() {
    randomize_maze();
    while (moves_left > 0) {
        display_maze();
        string inpt = input("Enter move (up, down, left, right): ");
        move_player(inpt);

        if (player_row == ROWS - 2 and player_col == COLS - 2) {
            print("Congratulations! You reached the final goal!");
            endloop;
        }
    }

    if (moves_left == 0) {
        print("Out of moves! Game over.");
    }
    print("Final Score: " + STR(score));
}

@ Start the game
play_game();
