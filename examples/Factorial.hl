@ Recursive factorial
fx factorial_recursive(int n) {
    if (n == 0 or n == 1) {
        return 1; @ Base case
    }
    return n * factorial_recursive(n - 1); @ Recursive call
}

@ Stack-based factorial
fx factorial_stack(int n) {
    int result = 1;
    list<int> stack = []; @ Simulate call stack
    stack.append(n);

    while (stack.length() > 0) {
        int current = stack[stack.length() - 1]; @ Peek the top
        stack.remove(stack.length() - 1); @ Pop the top

        if (current > 1) {
            result = result * current;
            stack.append(current - 1); @ Simulate recursive call with current - 1
        }
    }
    return result;
}

@ Iterative factorial
fx factorial_iterative(int n) {
    int result = 1;
    for (i, 1, n+1) {
        result = result * i;
    }
    return result;
}

@ Main program
int choice = INT(input("Choose the factorial method:\n1. Recursive\n2. Stack-based\n3. Iterative\n4. Built-in fact()\nEnter your choice (1, 2, 3, or 4): "));

int number = INT(input("Enter the number to calculate its factorial: "));
int factorial_result;

if (choice == 1) {
    factorial_result = factorial_recursive(number);
    print("Factorial of " + STR(number) + " using recursion is " + STR(factorial_result));
} elseif (choice == 2) {
    factorial_result = factorial_stack(number);
    print("Factorial of " + STR(number) + " using stack-based method is " + STR(factorial_result));
} elseif (choice == 3) {
    factorial_result = factorial_iterative(number);
    print("Factorial of " + STR(number) + " using iteration is " + STR(factorial_result));
} elseif (choice == 4) {

    @ Built-in Method
    factorial_result = number.fact();
    print("Factorial of " + STR(number) + " using the built-in fact() is " + STR(factorial_result));

} else {
    print("Invalid choice. Please run the program again.");
}
